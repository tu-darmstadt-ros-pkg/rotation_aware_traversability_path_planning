// =================================================================================================
// Copyright (c) 2023, Simon Giegerich, Technische Universit√§t Darmstadt
// All rights reserved.
//
// Redistribution and use in source and binary forms, with or without
// modification, are permitted provided that the following conditions are met:
//
// 1. Redistributions of source code must retain the above copyright notice, this
//    list of conditions and the following disclaimer.
//
// 2. Redistributions in binary form must reproduce the above copyright notice,
//    this list of conditions and the following disclaimer in the documentation
//    and/or other materials provided with the distribution.
//
// 3. Neither the name of the copyright holder nor the names of its
//    contributors may be used to endorse or promote products derived from
//    this software without specific prior written permission.
//
// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
// AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
// IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
// DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE
// FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
// DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
// SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
// CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
// OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
// OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
// =================================================================================================

#include <asterix_l3_plugins/asterix_floating_base_post_process.h>

#include <l3_math/math.h>
#include <l3_plugins/robot_model.h>
#include <l3_footstep_planning_libs/modeling/state_space_manager.h>

namespace asterix_l3
{
AsterixFloatingBasePostProcess::AsterixFloatingBasePostProcess()
  : PostProcessPlugin( "asterix_floating_base_post_process" ) { }

bool AsterixFloatingBasePostProcess::loadParams( const vigir_generic_params::ParameterSet &params )
{
  if ( !PostProcessPlugin::loadParams( params ))
    return false;

  getParam( "base_height", base_height_, 0.0 );

  return true;
}

bool AsterixFloatingBasePostProcess::initialize( const vigir_generic_params::ParameterSet &params )
{
  if ( !PostProcessPlugin::initialize( params ))
    return false;

  return true;
}

bool AsterixFloatingBasePostProcess::postProcess( State &state, const FootIndexArray & /*updated_ids*/) const
{
  /*
  if (!state.hasFootholds())
  {
    ROS_ERROR("[%s] postProcess: No footholds given!", getName().c_str());
    return false;
  }
  */

  // compute desired floating base pose
  if ( !state.hasFloatingBases())
  {
    Pose feet_center = state.getFeetCenter();
    feet_center.setZ( feet_center.z() + base_height_ );
    Pose base_pose = feet_center;

    std_msgs::Header header;
    header = state.getFootholds()[0]->header;

    FloatingBaseHashed::ConstPtr floating_base = StateSpaceManager::addFloatingBase(
      FloatingBase( BaseInfo::MAIN_BODY_IDX, base_pose, header ));
    state.updateFloatingBase( floating_base );
  }

  // add foothold (happens when generated by lattice goal state generator)
  if ( !state.hasFootholds())
  {
    Pose base_pose = state.getFloatingBase( BaseInfo::MAIN_BODY_IDX )->pose();
    base_pose.setZ( base_pose.z() - base_height_ );

    //std_msgs::Header header;
    //header = state.getFloatingBase( BaseInfo::MAIN_BODY_IDX )->header;

    Pose feet_center = RobotModel::kinematics()->calcStaticFeetCenterToBase().inverse() * base_pose;
    FootholdPtrArray neutral_stance = RobotModel::getNeutralStance( feet_center );
    for ( Foothold::Ptr foothold: neutral_stance )
    {
      FootholdHashed::ConstPtr foothold_hashed = StateSpaceManager::addFoothold( foothold );
      state.updateFoothold( foothold_hashed );
    }
  }

  return true;
}
}  // namespace asterix_l3_plugins

#include <pluginlib/class_list_macros.h>

PLUGINLIB_EXPORT_CLASS( asterix_l3::AsterixFloatingBasePostProcess, l3_footstep_planning::PostProcessPlugin )
